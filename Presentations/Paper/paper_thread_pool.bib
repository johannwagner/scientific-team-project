@article{pyarali2001evaluating,
  title={{Evaluating and Optimizing Thread Pool Strategies for Real-Time CORBA}},
  author={Pyarali, Irfan and Spivak, Marina and Cytron, Ron and Schmidt, Douglas C},
  journal={ACM SIGPLAN Notices},
  volume={36},
  number={8},
  pages={pp. 214--222},
  year={2001},
  publisher={ACM}
}

@article{wu2017empirical,
  title={{An Empirical Evaluation of In-Memory Multi-Version Concurrency Control}},
  author={Wu, Yingjun and Arulraj, Joy and Lin, Jiexi and Xian, Ran and Pavlo, Andrew},
  journal={Proceedings of the VLDB Endowment},
  volume={10},
  number={7},
  pages={781--792},
  year={2017},
  publisher={VLDB Endowment}
}

@inproceedings{psaroudakis2013task,
  title={{Task Scheduling for Highly Concurrent Analytical and Transactional Main-Memory Workloads}},
  author={Psaroudakis, Iraklis and Scheuer, Tobias and May, Norman and Ailamaki, Anastasia},
  booktitle={Proceedings of the Fourth International Workshop on Accelerating Data Management Systems Using Modern Processor and Storage Architectures (ADMS 2013)},
  number={EPFL-CONF-188280},
  year={2013}
}

@article{psaroudakis2016adaptive,
  title={{Adaptive NUMA-aware Data Placement and Task Scheduling for Analytical Workloads in Main-Memory Column-Stores}},
  author={Psaroudakis, Iraklis and Scheuer, Tobias and May, Norman and Sellami, Abdelkader and Ailamaki, Anastasia},
  journal={Proceedings of the VLDB Endowment},
  volume={10},
  number={2},
  pages={37--48},
  year={2016},
  publisher={VLDB Endowment}
}

@inproceedings{schuh2016experimental,
  title={{An Experimental Comparison of Thirteen Relational Equi-Joins in Main Memory}},
  author={Schuh, Stefan and Chen, Xiao and Dittrich, Jens},
  booktitle={Proceedings of the 2016 International Conference on Management of Data},
  pages={1961--1976},
  year={2016},
  organization={ACM}
}

@Article{Makreshanski2017,
author="Makreshanski, Darko
and Giannikis, Georgios
and Alonso, Gustavo
and Kossmann, Donald",
title={{Many-Query Join: Efficient Shared Execution of Relational Joins on Modern Hardware}},
journal="The VLDB Journal",
year="2017",
month="Aug",
day="30",
abstract="Database architectures typically process queries one at a time, executing concurrent queries in independent execution contexts. Often, such a design leads to unpredictable performance and poor scalability. One approach to circumvent the problem is to take advantage of sharing opportunities across concurrently running queries. In this paper, we propose many-query join (MQJoin), a novel method for sharing the execution of a join that can efficiently deal with hundreds of concurrent queries. This is achieved by minimizing redundant work and making efficient use of main-memory bandwidth and multi-core architectures. Compared to existing proposals, MQJoin is able to efficiently handle larger workloads regardless of the schema by exploiting more sharing opportunities. We also compared MQJoin to two commercial main-memory column-store databases. For a TPC-H-based workload, we show that MQJoin provides 2--5                                                                  {\$}{\$}{\backslash}times {\$}{\$}                                                      {\texttimes}                                                 higher throughput with significantly more stable response times.",
issn="0949-877X",
doi="10.1007/s00778-017-0475-4",
url="https://doi.org/10.1007/s00778-017-0475-4"
}



@inproceedings{agrawal2017many,
  title={{A Many-Core Architecture for In-Memory Data Processing}},
  author={Agrawal, Sandeep R and Idicula, Sam and Raghavan, Arun and Vlachos, Evangelos and Govindaraju, Venkatraman and Varadarajan, Venkatanathan and Balkesen, Cagri and Giannikis, Georgios and Roth, Charlie and Agarwal, Nipun and others},
  booktitle={Proceedings of the 50th Annual IEEE/ACM International Symposium on Microarchitecture},
  pages={245--258},
  year={2017},
  organization={ACM}
}

@article{10.5120/ijca2016912260,
  author = {Mohammed Hamdi and Weidong Xiong and Feng Yu and Sarah Alswedani and Wen-Chi Hou},
  title = {{An Aggressive Concurrency Control Protocol for Main Memory Databases}},
  journal = {International Journal of Computer Applications},
  issue_date = {December 2016},
  volume = {155},
  number = {2},
  month = {Dec},
  year = {2016},
  issn = {0975-8887},
  pages = {7-13},
  numpages = {7},
  url = {http://www.ijcaonline.org/archives/volume155/number2/26575-2016912260},
  doi = {10.5120/ijca2016912260},
  publisher = {Foundation of Computer Science (FCS), NY, USA},
  address = {New York, USA}
}

@InProceedings{10.1007/978-3-319-72413-3_8,
author="Sridhar, K. T.",
editor="Reddy, P. Krishna
and Sureka, Ashish
and Chakravarthy, Sharma
and Bhalla, Subhash",
title={{Modern Column Stores for Big Data Processing}},
booktitle="Big Data Analytics",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="113--125",
abstract="The advent of MapReduce/Hadoop and NoSQL databases undermined the primacy of SQL relational databases for data processing. Pioneering work by researchers on MonetDB and C-Store opened up the world of column stores that retain the SQL model but use different store and engine for performance gains. The emergence of pay-by-use clouds and MPP versions of column stores on cloud eliminated scale-out issues of row stores. Data mining researchers have also shown that SQL on parallel, columnar database could be a candidate for Big Data analytics. In this survey written for a tutorial, we trace the technology evolution and history of the fall of row stores and rise of column stores, delving into architectural details of column DBs from academia and industry.",
isbn="978-3-319-72413-3"
}



@book{DBLP:series/synthesis/2017Ailamaki,
  author    = {Anastasia Ailamaki and
               Erietta Liarou and
               Pinar T{\"{o}}z{\"{u}}n and
               Danica Porobic and
               Iraklis Psaroudakis},
  title     = {{Databases on Modern Hardware: How to Stop Underutilization and Love
               Multicores}},
  series    = {Synthesis Lectures on Data Management},
  publisher = {Morgan {\&} Claypool Publishers},
  year      = {2017},
  url       = {https://doi.org/10.2200/S00774ED1V01Y201704DTM045},
  doi       = {10.2200/S00774ED1V01Y201704DTM045},
  timestamp = {Mon, 11 Sep 2017 01:00:00 +0200},
  biburl    = {https://dblp.org/rec/bib/series/synthesis/2017Ailamaki},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{books/daglib/0018624,
  author = {Reinders, James},
  isbn = {978-0-596-51480-8},
  keywords = {dblp},
  pages = {I-XXV, 1-303},
  publisher = {O'Reilly},
  timestamp = {2011-04-29T15:26:09.000+0200},
  title = {{Intel Threading Building Blocks - Outfitting C++ for Multi-Core Processor Parallelism.}},
  year = 2007
}

@inproceedings{Alonso:2013:HKS:2510649.2511162,
 author = {Alonso, Gustavo},
 title = {{Hardware Killed the Software Star}},
 booktitle = {Proceedings of the 2013 IEEE International Conference on Data Engineering (ICDE 2013)},
 series = {ICDE '13},
 year = {2013},
 isbn = {978-1-4673-4909-3},
 pages = {1--4},
 numpages = {4},
 url = {http://dx.doi.org/10.1109/ICDE.2013.6544807},
 doi = {10.1109/ICDE.2013.6544807},
 acmid = {2511162},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}


@article{pinneckegridtables,
  title={{GridTables: A One-Size-Fits-Most Data Store Architecture for GPU-Powered HTAP Databases}},
  author={Pinnecke, Marcus and Campero Durand, Gabriel and Broneske, David and Zoun, Roman and Saake, Gunter},
  journal={submitted for publication},
  year={2018}
}

@phdthesis{xu2004performance,
  title={{Performance Study and Dynamic Optimization Design for Thread Pool Systems}},
  author={Xu, Dongping and Bode, Brett},
  year={2004},
  school={United States. Department of Energy. Office of Science}
}

@article{ling2000analysis,
  title={{Analysis of optimal thread pool size}},
  author={Ling, Yibei and Mullen, Tracy and Lin, Xiaola},
  journal={ACM SIGOPS Operating Systems Review},
  volume={34},
  number={2},
  pages={pp. 42--55},
  year={2000},
  publisher={ACM}
}WW

@misc{atomicstrong,
  title={atomic\_compare\_exchange\_strong - cppreference.com},
  author = {cppreference.com},
  howpublished="\url{https://en.cppreference.com/w/c/atomic/atomic_compare_exchange}",
  note = "[Online; accessed 6-July-2018]"
}

@article{sen2010quick,
  title={{A Quick Introduction to the Google C++ Testing Framework}},
  author={Sen, Arpan},
  journal={IBM DeveloperWorks},
  pages={p. 20},
  year={2010}
}

@article{kim2011multicore,
  title={{Multicore desktop programming with intel threading building blocks}},
  author={Kim, Wooyoung and Voss, Michael},
  journal={IEEE software},
  volume={28},
  number={1},
  pages={pp. 23--31},
  year={2011},
  publisher={IEEE}
}

@article{schmidt1998evaluating,
  title={{Evaluating architectures for multithreaded object request brokers}},
  author={Schmidt, Douglas C},
  journal={Communications of the ACM},
  volume={41},
  number={10},
  pages={pp. 54--60},
  year={1998},
  publisher={ACM}
}

@TechReport{it:2018-003,
	author	= {Jonatan Lind{\'e}n and Bengt Jonsson},
	title		= {{A Skiplist-Based Concurrent Priority Queue with Minimal
	Memory Contention}},
	institution	= {Department of Information Technology, Uppsala University},
	department	= {Division of Computer Systems},
	year		= {2018},
	number	= {2018-003},
	month		= feb,
	note		= {Revised and corrected version of Technical Report
	2013-025.},
	abstract	= {Priority queues are fundamental to many multiprocessor
	applications. Several priority queue algorithms based on
	skiplists have been proposed, as skiplists allow concurrent
	accesses to different parts of the data structure in a
	simple way. However, for priority queues on
	multiprocessors, an inherent bottleneck is the operation
	that deletes the minimal element. We present a
	linearizable, lock-free, concurrent priority queue
	algorithm, based on skiplists, which minimizes the
	contention for shared memory that is caused by the
	\textsc{DeleteMin} operation. The main idea is to minimize
	the number of global updates to shared memory that are
	performed in one \textsc{DeleteMin}. In comparison with
	other skiplist-based priority queue algorithms, our
	algorithm achieves a 30 - 80\% improvement.}
}
