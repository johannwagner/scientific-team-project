@article{pyarali2001evaluating,
  title={Evaluating and optimizing thread pool strategies for real-time CORBA},
  author={Pyarali, Irfan and Spivak, Marina and Cytron, Ron and Schmidt, Douglas C},
  journal={ACM SIGPLAN Notices},
  volume={36},
  number={8},
  pages={pp. 214--222},
  year={2001},
  publisher={ACM}
}

@phdthesis{xu2004performance,
  title={Performance study and dynamic optimization design for thread pool systems},
  author={Xu, Dongping and Bode, Brett},
  year={2004},
  school={Citeseer}
}

@article{ling2000analysis,
  title={Analysis of optimal thread pool size},
  author={Ling, Yibei and Mullen, Tracy and Lin, Xiaola},
  journal={ACM SIGOPS Operating Systems Review},
  volume={34},
  number={2},
  pages={pp. 42--55},
  year={2000},
  publisher={ACM}
}

@online{atomicstrong,
  author = {cppreference.com},
  title = {atomic\_compare\_exchange\_strong - cppreference.com},
  year = 2016,
  url = {http://en.cppreference.com/w/c/atomic/atomic_compare_exchange},
  urldate = {2018-06-19}
}

@article{sen2010quick,
  title={A quick introduction to the Google C++ Testing Framework},
  author={Sen, Arpan},
  journal={IBM DeveloperWorks},
  pages={p. 20},
  year={2010}
}

@article{kim2011multicore,
  title={Multicore desktop programming with intel threading building blocks},
  author={Kim, Wooyoung and Voss, Michael},
  journal={IEEE software},
  volume={28},
  number={1},
  pages={pp. 23--31},
  year={2011},
  publisher={IEEE}
}

@article{schmidt1998evaluating,
  title={Evaluating architectures for multithreaded object request brokers},
  author={Schmidt, Douglas C},
  journal={Communications of the ACM},
  volume={41},
  number={10},
  pages={pp. 54--60},
  year={1998},
  publisher={ACM}
}

@TechReport{	  it:2018-003,
	author	= {Jonatan Lind{\'e}n and Bengt Jonsson},
	title		= {A Skiplist-Based Concurrent Priority Queue with Minimal
	Memory Contention},
	institution	= {Department of Information Technology, Uppsala University},
	department	= {Division of Computer Systems},
	year		= {2018},
	number	= {2018-003},
	month		= feb,
	note		= {Revised and corrected version of Technical Report
	2013-025.},
	abstract	= {Priority queues are fundamental to many multiprocessor
	applications. Several priority queue algorithms based on
	skiplists have been proposed, as skiplists allow concurrent
	accesses to different parts of the data structure in a
	simple way. However, for priority queues on
	multiprocessors, an inherent bottleneck is the operation
	that deletes the minimal element. We present a
	linearizable, lock-free, concurrent priority queue
	algorithm, based on skiplists, which minimizes the
	contention for shared memory that is caused by the
	\textsc{DeleteMin} operation. The main idea is to minimize
	the number of global updates to shared memory that are
	performed in one \textsc{DeleteMin}. In comparison with
	other skiplist-based priority queue algorithms, our
	algorithm achieves a 30 - 80\% improvement.}
